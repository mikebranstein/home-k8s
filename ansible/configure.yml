---
- name: Pre-configuration and package update
  hosts: all
  gather_facts: no
  remote_user: ubuntu
  become: true
  vars:
    reboot: true

  tasks:
  - name: Update package cache
    apt: 
      update_cache: yes

  - name: Install Raspberry Pi EEPROM update package
    apt:
      name: rpi-eeprom
      state: latest

  - name: Display Raspberry Pi EEPROM status
    command: rpi-eeprom-update
    register: eeprom
    ignore_errors: true
  - debug: var=eeprom.stdout_lines

  - name: Upgrade all packages, full-upgrade
    apt:
      upgrade: full

  - name: Set hostname
    hostname:
      name: "{{ hostname }}"

  - name: Reboot and wait
    reboot:
      reboot_timeout: 300
    when: reboot == true

  - name: Display Raspberry Pi EEPROM status
    command: rpi-eeprom-update
    register: eeprom
  - debug: var=eeprom.stdout_lines


# Instructions derived from https://opensource.com/article/20/6/kubernetes-raspberry-pi 
- name: Configure K8s
  hosts: all
  gather_facts: no
  remote_user: ubuntu
  become: true

  tasks:
  - name: Install docker.io
    apt: 
      name: docker.io

  - name: Replace /etc/docker/daemon.json
    copy:
      src: ./files/etc/docker/daemon.json
      dest: /etc/docker/daemon.json

  - name: Read the boot firmware command line file
    shell: cat /boot/firmware/cmdline.txt
    register: boot_command_line

  - name: Enable cgroups cpuset, if disabled
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.+)$'
      replace: '\1 cgroup_enable=cpuset'
    when: boot_command_line.stdout.find('cgroup_enable=cpuset') == -1

  - name: Enable cgroups memory, if disabled
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.+)$'
      replace: '\1 cgroup_enable=memory'
    when: boot_command_line.stdout.find('cgroup_enable=memory') == -1

  - name: Replace existing cgroups memory value with 1
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '\scgroup_memory=(\d+)\s'
      replace: ' cgroup_memory=1 '

  - name: Replace existing swapaccount value with 1
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '\sswapaccount=(\d+)\s'
      replace: ' swapaccount=1 '
    when: boot_command_line.stdout.find('swapaccount=1') == -1

  - name: Read the boot firmware command line file
    shell: cat /boot/firmware/cmdline.txt
    register: boot_command_line

  - name: Set cgroups memory to 1, if not present
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.+)$'
      replace: '\1 cgroup_memory=1'
    when: boot_command_line.stdout.find('cgroup_memory=1') == -1

  - name: Set swapaccount to 1, if not present
    replace:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.+)$'
      replace: '\1 swapaccount=1'
    when: boot_command_line.stdout.find('swapaccount=1') == -1

  - name: Show docker info
    command: docker info
    register: docker_info
    ignore_errors: yes
  - debug: var=docker_info.stdout_lines

  - name: Configure iptables to see bridged network traffic
    copy:
      src: ./files/etc/sysctl.d/k8s.conf
      dest: /etc/sysctl.d/k8s.conf

  - name: Apply iptables configuration changes to kernel
    command: sysctl --system

  - name: Add the packages.cloud.google.com apt key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Add the Kubernetes repo
    copy: 
      src: ./files/etc/apt/sources.list.d/kubernetes.list
      dest: /etc/apt/sources.list.d/kubernetes.list

  - name: Udate cache, install kubelet, kubeadm, and kubectl
    apt:
      pkg:
      - kubelet
      - kubeadm
      - kubectl
      state: latest
      update_cache: yes