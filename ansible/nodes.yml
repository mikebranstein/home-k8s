---
- name: get node pool join token
  hosts: master
  remote_user: ubuntu
  become: true

  tasks: 
  - name: Generate cluster join token
    shell: kubeadm token create --print-join-command
    register: k8s_join

  - debug:
      msg: "{{ k8s_join.stdout }}"

  - set_fact:
      token: "{{ k8s_join.stdout | regex_search(regexp, '\\2') | first }}"
    vars:
      regexp: '([^\s]+\s+){4}([^\s]+)'

  - debug:
      msg: "Join token is: {{ token }}"

  - set_fact:
      hash: "{{ k8s_join.stdout | regex_search(regexp, '\\2') | first }}"
    vars:
      regexp: '([^\s]+\s+){6}([^\s]+)'

  - debug:
      msg: "Join CA hash is: {{ hash }}"

- name: Initialize nodes
  hosts: nodes
  remote_user: ubuntu
  become: true

  tasks:
  - name: Detect if control plane has been initialized
    stat:
      path: /etc/kubernetes/kubelet.conf
    register: stat_result

  - name: Join nodes to cluster
    command: "kubeadm join {{ groups['master'][0] }}:6443 --token {{ hostvars[groups['master'][0]]['token'] }} --discovery-token-ca-cert-hash {{ hostvars[groups['master'][0]]['hash'] }}"
    register: node_join
    when: not stat_result.stat.exists

  - debug:
      msg: "{{ node_join.stdout_lines }}"
    when: not stat_result.stat.exists

- name: Verify all nodes joined the cluster
  hosts: master
  remote_user: ubuntu
  become: true

  tasks:
  - name: Wait for all nodes to join cluster
    command: "kubectl get node {{ hostvars[item]['hostname'] }}"
    register: get_nodes
    until: get_nodes.stdout.find("NotReady") == -1
    retries: 5
    delay: 10
    with_items: "{{ groups['nodes'] }}"

  - name: Verify all nodes joined
    command: kubectl get nodes
    register: get_nodes

  - debug: 
      msg: "{{ get_nodes.stdout_lines }}"