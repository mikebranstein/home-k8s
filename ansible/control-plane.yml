---
- name: Initialize the control plane
  hosts: master
  gather_facts: no
  remote_user: ubuntu
  become: true
  vars:
    kubernetes_version: v1.19.4
    pod_network_cidr: 192.168.24.0/21

  tasks:
  - name: Detect if control plane has been initialized
    stat:
      path: /etc/kubernetes/admin.conf
    register: stat_result

  - name: Generate a bootstrap token to authenticate nodes joining the cluster
    command: kubeadm token generate
    register: token
    when: not stat_result.stat.exists

  - name: Add K8S Token to dummy host
    add_host: 
      name: K8S_TOKEN_HOLDER
      token: "{{ token.stdout }}"
    when: not stat_result.stat.exists

  - name: Display bootstrap token
    debug: 
      msg: "Bootstrap token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"
    when: not stat_result.stat.exists

  - name: Initialize the control plane
    command: "kubeadm init --token={{ hostvars['K8S_TOKEN_HOLDER']['token'] }} --kubernetes-version={{ kubernetes_version }} --pod-network-cidr={{ pod_network_cidr }}"
    register: result
    when: not stat_result.stat.exists

  - name: Show kubeadm init result
    debug: 
      msg: "{{ result.stdout_lines }}"
    when: not stat_result.stat.exists

  - name: Create .kube directory
    file:
      path: ~/.kube
      state: directory

  - name: Copy kube admin 
    copy: 
      src: /etc/kubernetes/admin.conf 
      dest: ~/.kube/config
      remote_src: yes

  - name: Copy Flanel CNI deployment yaml locally
    get_url:
      url: https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      dest: /tmp/kube-flanel.yml

  - name: Replace Flanel Network defualt of 10.244.0.0/16 with pod cidr range
    replace:
      path: /tmp/kube-flanel.yml
      regexp: '(^\s*)\"Network\":\s*\"(\d+.){3}\d+\/\d+\",$' # i.e., "Network": "10.244.0.0/16", or some other variant
      replace: '\1"Network": "{{ pod_network_cidr }}",'

  - name: Install flanel CNI 
    command: kubectl apply -f /tmp/kube-flanel.yml
    register: flanel

  - debug:
      msg: "{{ flanel.stdout_lines }}"

  - name: Wait for control plane to be ready
    command: kubectl get nodes
    register: get_nodes
    until: get_nodes.stdout.find("NotReady") == -1
    retries: 12
    delay: 10

  - debug:
      msg: "{{ get_nodes.stdout_lines }}"

  # enable strict ARP for MetalLB
  - name: export kube-proxy config
    shell: kubectl get configmap kube-proxy --namespace kube-system -o yaml > /tmp/kube-proxy.yml

  - name: Update config file for strictARP = true
    replace:
      path: /tmp/kube-proxy.yml
      regexp: '(^\s*)strictARP: false$' # strictARP: false
      replace: '\1strictARP: true'

  - name: enable strictARP = true
    command: kubectl apply -f /tmp/kube-proxy.yml --namespace kube-system
    register: result
  - debug:
      msg: "{{ result.stdout_lines }}"

  # install MetalLB
  - name: install MetalLB namespace
    command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml

  - name: install MetalLB
    command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml
    register: result
  - debug:
      msg: "{{ result.stdout_lines }}"

  - name: query for metallb secret
    command: kubectl get secret memberlist --namespace metallb-system
    register: secret
    ignore_errors: true

  - name: create secret - one-time-only
    shell: kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
    register: result
    when: secret.stderr.find("NotFound") != -1
  - debug:
      msg: "{{ result.stdout_lines }}"
    when: secret.stderr.find("NotFound") != -1

  - name: Copy MetalLB config manifest
    copy: 
      src: ./files/tmp/metallb-config.yml
      dest: /tmp/metallb-config.yml

  - name: Apply MetalLB config manifest
    command: kubectl apply -f /tmp/metallb-config.yml
    register: result
  - debug:
      msg: "{{ result.stdout_lines }}"
