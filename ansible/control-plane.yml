---
- name: Initialize the control plane
  hosts: master
  gather_facts: no
  remote_user: ubuntu
  become: true
  vars:
    kubernetes_version: v1.19.4
    pod_network_cidr: 192.168.21.0/24

  tasks:
  - name: Detect if control plane has been initialized
    stat:
      path: /etc/kubernetes/admin.conf
    register: stat_result

  - name: Generate a bootstrap token to authenticate nodes joining the cluster
    command: kubeadm token generate
    register: token
    when: not stat_result.stat.exists

  - name: Add K8S Token to dummy host
    add_host: 
      name: K8S_TOKEN_HOLDER
      token: "{{ token.stdout }}"
    when: not stat_result.stat.exists

  - name: Display bootstrap token
    debug: 
      msg: "Bootstrap token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"
    when: not stat_result.stat.exists

  - name: Initialize the control plane
    command: "kubeadm init --token={{ hostvars['K8S_TOKEN_HOLDER']['token'] }} --kubernetes-version={{ kubernetes_version }} --pod-network-cidr={{ pod_network_cidr }}"
    register: result
    when: not stat_result.stat.exists

  - name: Show kubeadm init result
    debug: 
      msg: "{{ result.stdout_lines }}"
    when: not stat_result.stat.exists

  - name: Create .kube directory
    file:
      path: ~/.kube
      state: directory

  - name: Copy kube admin 
    copy: 
      src: /etc/kubernetes/admin.conf 
      dest: ~/.kube/config
      remote_src: yes

  - name: Install flanel CNI 
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
    register: flanel

  - debug:
      msg: "{{ flanel.stdout_lines }}"

  - name: Wait for control plane to be ready
    command: kubectl get nodes
    register: get_nodes
    until: get_nodes.stdout.find("Not Ready") == -1
    retries: 5
    delay: 10

  - debug:
      msg: "{{ get_nodes.stdout_lines }}"